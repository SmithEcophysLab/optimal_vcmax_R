getwd()
library(R.utils)
sourceDirectory('functions')
calc_optimal_vcmax = function(tl_c, tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	hdvc = 200000#
	havc = 71513#
	adelSvc = 668.39#
	bdelSvc = -1.07#
	# temperature conversions#
	tg_K = tg_c + 273.15#
	tl_K = tl_c + 273.15#
	# driving model variables#
	to = (0.44 * tg + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tmean, z)#
	gammastar = calc_gammastar_pa(tmean, z)#
	chi = calc_chi(tmean, z, vpdo, cao)#
	vpd = calc_vpd(tmean, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca_pa # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tmean, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tmean', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
sourceDirectory('functions')#
#
calc_optimal_vcmax = function(tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	hdvc = 200000#
	havc = 71513#
	adelSvc = 668.39#
	bdelSvc = -1.07#
	# temperature conversion#
	tg_K = tg_c + 273.15#
	# driving model variables#
	to = (0.44 * tg + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tmean, z)#
	gammastar = calc_gammastar_pa(tmean, z)#
	chi = calc_chi(tmean, z, vpdo, cao)#
	vpd = calc_vpd(tmean, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca_pa # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tg, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tg', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
calc_optimal_vcmax(25, 0, 1, 400, 800, 0.257, 0.85)
calc_optimal_vcmax = function(tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	hdvc = 200000#
	havc = 71513#
	adelSvc = 668.39#
	bdelSvc = -1.07#
	# temperature conversion#
	tg_K = tg_c + 273.15#
	# driving model variables#
	to = (0.44 * tg_c + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tmean, z)#
	gammastar = calc_gammastar_pa(tmean, z)#
	chi = calc_chi(tmean, z, vpdo, cao)#
	vpd = calc_vpd(tmean, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca_pa # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tg, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tg', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
calc_optimal_vcmax(25, 0, 1, 400, 800, 0.257, 0.85)
calc_optimal_vcmax = function(tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	hdvc = 200000#
	havc = 71513#
	adelSvc = 668.39#
	bdelSvc = -1.07#
	# temperature conversion#
	tg_K = tg_c + 273.15#
	# driving model variables#
	to = (0.44 * tg_c + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tg_c, z)#
	gammastar = calc_gammastar_pa(tg_c, z)#
	chi = calc_chi(tg_c, z, vpdo, cao)#
	vpd = calc_vpd(tg_c, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca_pa # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tg, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tg', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
calc_optimal_vcmax(25, 0, 1, 400, 800, 0.257, 0.85)
calc_optimal_vcmax = function(tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	hdvc = 200000#
	havc = 71513#
	adelSvc = 668.39#
	bdelSvc = -1.07#
	# temperature conversion#
	tg_K = tg_c + 273.15#
	# driving model variables#
	to = (0.44 * tg_c + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tg_c, z)#
	gammastar = calc_gammastar_pa(tg_c, z)#
	chi = calc_chi(tg_c, z, vpdo, cao)#
	vpd = calc_vpd(tg_c, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tg, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tg', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
calc_optimal_vcmax(25, 0, 1, 400, 800, 0.257, 0.85)
calc_optimal_vcmax = function(tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	hdvc = 200000#
	havc = 71513#
	adelSvc = 668.39#
	bdelSvc = -1.07#
	# temperature conversion#
	tg_K = tg_c + 273.15#
	# driving model variables#
	to = (0.44 * tg_c + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tg_c, z)#
	gammastar = calc_gammastar_pa(tg_c, z)#
	chi = calc_chi(tg_c, z, vpdo, cao)#
	vpd = calc_vpd(tg_c, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tg, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tg', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
calc_optimal_vcmax(25, 0, 1, 400, 800, 0.257, 0.85)
# load necessary functions#
sourceDirectory('functions')#
#
calc_optimal_vcmax = function(tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	hdvc = 200000#
	havc = 71513#
	adelSvc = 668.39#
	bdelSvc = -1.07#
	# temperature conversion#
	tg_K = tg_c + 273.15#
	# driving model variables#
	to = (0.44 * tg_c + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tg_c, z)#
	gammastar = calc_gammastar_pa(tg_c, z)#
	chi = calc_chi(tg_c, z, vpdo, cao)#
	vpd = calc_vpd(tg_c, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tg, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tg', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
calc_optimal_vcmax(25, 0, 1, 400, 800, 0.257, 0.85)
# calculate optimal vcmax as in Smith et al. Photosynthetic capacity is optimized to the #
# environment. Ecology Letters.#
#
#########################
## variable key#
#########################
#
 tg_c: acclimated temperature (degC)#
# z: elevation (m)#
# vpdo: vapor pressure deficit at sea level (kPa)#
# cao: atmospheric CO2 at sea level (Pa)#
# paro: photosynthetically active radiation at sea level (µmol m-2 s-1)#
# q0: quantum efficiency of photosynthetic electron transport (mol/mol)#
# theta: curvature of the light response of electron transport (unitless)#
# R: universal gas constant (J mol-1 K-1)#
# hdvc: deactivation energy for vcmax (J mol-1)#
# havc: activation energy for vcmax (J mol-1)#
# adelSvc = intercept of the relationship between the entropy term of the vcmax temperature response and acclimated temperature (J mol-1 deC-1) #
# bdelSvc = slope of the relationship between the entropy term of the vcmax temperature response and acclimated temperature (J mol-1 deC-1 degC-1)#
# tg_K: acclimated temperature (K)#
# to = temperature optimum for vcmax (degC)#
# patm: atmospheric pressure (Pa)#
# ca: atmospheric CO2 at z (Pa)#
# km: Michaelis-Menten constant for Rubisco (Pa)#
# gammastar: CO2 compensation point (Pa)#
# chi: leaf intercellular to atmospheric CO2 ratio (ci/ca) (unitless)#
# vpd: vapor pressure deficit at z (kPa)#
# par: photosynthetically active radiation at z (µmol m-2 s-1)#
# ci: leaf intercellular CO2 concentation (Pa)#
# m: CO2 limiation of electron transport rate limited photosynthesis (Pa)#
# mc: CO2 limiation of Rubisco carboxylation rate limited photosynthesis (Pa)#
# c: constant describing cost of maintaining electron transport (unitless)#
# omega: omega term from Smith et al.#
# omega_star: omega_star term from Smith et al.#
# vcmax_star: maximum rate of Rubisco carboxylation without temperature correction (µmol m-2 s-1) #
# vcmax_prime: optimal maximum rate of Rubisco carboxylation at tg (µmol m-2 s-1)#
# jvrat: ratio of the maximum rate of electron transport to the maximum rate of Rubisco carbocylation at tg (unitless)#
# jmax_prime: optimal maximum rate of electron transport at tg (µmol m-2 s-1)#
# libraries#
# install.packages('R.utils')#
library(R.utils)#
#
# load necessary functions#
sourceDirectory('functions')#
#
calc_optimal_vcmax = function(tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	hdvc = 200000#
	havc = 71513#
	adelSvc = 668.39#
	bdelSvc = -1.07#
	# temperature conversion#
	tg_K = tg_c + 273.15#
	# driving model variables#
	to = (0.44 * tg_c + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tg_c, z)#
	gammastar = calc_gammastar_pa(tg_c, z)#
	chi = calc_chi(tg_c, z, vpdo, cao)#
	vpd = calc_vpd(tg_c, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tg_c, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tg_c', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
calc_optimal_vcmax(25, 0, 1, 400, 800, 0.257, 0.85)
# calculate optimal vcmax as in Smith et al. Photosynthetic capacity is optimized to the #
# environment. Ecology Letters.#
#
#########################
## variable key#
#########################
#
# tg_c: acclimated temperature (degC)#
# z: elevation (m)#
# vpdo: vapor pressure deficit at sea level (kPa)#
# cao: atmospheric CO2 at sea level (Pa)#
# paro: photosynthetically active radiation at sea level (µmol m-2 s-1)#
# q0: quantum efficiency of photosynthetic electron transport (mol/mol)#
# theta: curvature of the light response of electron transport (unitless)#
# R: universal gas constant (J mol-1 K-1)#
# tg_K: acclimated temperature (K)#
# to = temperature optimum for vcmax (degC)#
# patm: atmospheric pressure (Pa)#
# ca: atmospheric CO2 at z (Pa)#
# km: Michaelis-Menten constant for Rubisco (Pa)#
# gammastar: CO2 compensation point (Pa)#
# chi: leaf intercellular to atmospheric CO2 ratio (ci/ca) (unitless)#
# vpd: vapor pressure deficit at z (kPa)#
# par: photosynthetically active radiation at z (µmol m-2 s-1)#
# ci: leaf intercellular CO2 concentation (Pa)#
# m: CO2 limiation of electron transport rate limited photosynthesis (Pa)#
# mc: CO2 limiation of Rubisco carboxylation rate limited photosynthesis (Pa)#
# c: constant describing cost of maintaining electron transport (unitless)#
# omega: omega term from Smith et al.#
# omega_star: omega_star term from Smith et al.#
# vcmax_star: maximum rate of Rubisco carboxylation without temperature correction (µmol m-2 s-1) #
# vcmax_prime: optimal maximum rate of Rubisco carboxylation at tg (µmol m-2 s-1)#
# jvrat: ratio of the maximum rate of electron transport to the maximum rate of Rubisco carbocylation at tg (unitless)#
# jmax_prime: optimal maximum rate of electron transport at tg (µmol m-2 s-1)#
# libraries#
# install.packages('R.utils')#
library(R.utils)#
#
# load necessary functions#
sourceDirectory('functions')#
#
calc_optimal_vcmax = function(tg_c, z, vpdo, cao, paro, q0, theta){#
	# constants#
	R = 8.314#
	# temperature conversion#
	tg_K = tg_c + 273.15#
	# driving model variables#
	to = (0.44 * tg_c + 24.92) #
	patm = calc_patm(z)#
	ca = cao * 1e-6 * patm#
	km = calc_km_pa(tg_c, z)#
	gammastar = calc_gammastar_pa(tg_c, z)#
	chi = calc_chi(tg_c, z, vpdo, cao)#
	vpd = calc_vpd(tg_c, z, vpdo)#
	par = calc_par(paro, z)#
	ci = chi * ca # Pa#
	m = ((ci - gammastar)/(ci + (2 * gammastar))) #Aj CO2 limitation#
	mc = ((ci - gammastar) / (ci + km)) #Av CO2 limitation#
	c = calc_c(temp = 25, z = 0, vpdo = 1, cao = 360, jv25 = 2.07, theta)#
	omega = calc_omega(theta = theta, c = c, m = m)#
	omega_star = (1 + (omega) - sqrt((1 + (omega))^2 - (4 * theta * omega))) #
	#calculate vcmax and jmax	#
	vcmax_star = ((q0 * par * m) / mc) * (omega_star / (8 * theta))	#
	vcmax_prime = vcmax_star * calc_vcmax_tresp_mult(tg_c, tg_c, tref = to)#
	jvrat = ((8 * theta * mc * omega) / (m * omega_star))#
	jmax_prime = jvrat * vcmax_prime#
	# output#
	results = as.data.frame(cbind(tg_c, z, vpdo, cao, paro, q0, theta, par, patm, ca, vpd, chi, ci, km, gammastar, omega, c, m, mc, omega_star, vcmax_prime, jvrat, jmax_prime))#
	colnames(results) = c('tg_c', 'z', 'vpdo', 'cao', 'paro', 'q0', 'theta', 'par', 'patm', 'ca', 'vpd', 'chi', 'ci', 'km', 'gammastar', 'omega', 'c', 'm', 'mc', 'omega_star', 'vcmax_prime', 'jvrat', 'jmax_prime')#
	results	#
}
