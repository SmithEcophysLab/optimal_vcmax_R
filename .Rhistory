## load libraries
library(R.utils)
library(lme4)
library(car)
devtools::install_github("hohenstein/remef")
library(remef)
library(emmeans)
library(tidyverse)
library(caret)
library(relaimpo)
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax_R/functions')
source('optimal_vcmax_R/calc_optimal_vcmax.R')
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax_R/functions')
pwd()
getwd()
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax_R/functions')
## load libraries
library(R.utils)
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax_R/functions')
## load libraries
library(R.utils)
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax_R/functions')
getwd()
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax/functions')
source('optimal_vcmax/calc_optimal_vcmax.R')
View(calc_optimal_vcmax)
temperature = calc_optimal_vcmax(tg_c = seq(5, 35, 5))
light = calc_optimal_vcmax(paro = seq(100, 1500, 50))
head(temperature)
calc_tresp_mult
source('optimal_vcmax/calc_optimal_vcmax.R')
## data for temperature and light responses
temperature = calc_optimal_vcmax(tg_c = seq(5, 35, 5))
light = calc_optimal_vcmax(paro = seq(100, 1500, 50))
head(temperature)
head(light)
getwd()
setwd("/Users/nicksmith/Documents/Git/NutNetPhys/Analysis")
## load libraries
library(R.utils)
library(lme4)
library(car)
devtools::install_github("hohenstein/remef")
library(remef)
library(emmeans)
library(tidyverse)
library(caret)
library(relaimpo)
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax_R/functions')
source('optimal_vcmax_R/calc_optimal_vcmax_nutnet.R')
sourceDirectory('optimal_vcmax_R/functions')
source('optimal_vcmax_R/calc_optimal_vcmax_nutnet.R')
## load observational data
traits = read.csv('../Data/leaf_plus.csv')
head(traits)
## make sure factors are correctly defined
traits$Ntrt_fac = as.factor(traits$Ntrt_fac)
traits$Ptrt_fac = as.factor(traits$Ptrt_fac)
traits$Ktrt_fac = as.factor(traits$Ktrt_fac)
## add in photosynthetic pathway information
levels(traits$Family) # check Amaranthaceae, Asteraceae, Boraginaceae, Caryophyllaceae, Cyperaceae, Euphorbiaceae,
# Polygonaceae, Poaceae, Scrophulariaceae
# only one!
# C4
traits$photosynthetic_pathway[traits$photosynthetic_pathway == 'NULL'
& traits$Family == 'Cyperaceae' & traits$Taxon == 'FIMBRISTYLIS DICHOTOMA'] <- 'C4'
traits$photosynthetic_pathway[traits$photosynthetic_pathway == 'NULL'] <- 'C3'
## calculate lma (in g m-2) and narea
hist(traits$leaf_area_mm2)
traits$la_m2 = traits$leaf_area_mm2 * (1/1000000)
traits$lma = traits$leaf_dry_mass_g / traits$la_m2
traits$narea = (traits$leaf_pct_N / 100) * (traits$lma)
hist(traits$lma) # some extremely high values
hist(traits$narea) # some extremely high values
hist(traits$la_m2)
hist(traits$leaf_dry_mass_g) # some very hig values
hist(subset(traits, leaf_dry_mass_g < 100)$leaf_dry_mass_g)
## some light calculations
traits$lai = -log(traits$Ground_PAR / traits$Ambient_PAR) / 0.86 # from: http://manuals.decagon.com/Manuals/10242_Accupar%20LP80_Web.pdf page 41
hist(traits$lai)
### calculate par per leaf area to assume par absorbed is reduced in dense canopies
traits$par_per_leaf_area = traits$par * ((1 - exp(-0.5 * traits$lai)) / traits$lai) # from Dong et al. (2007) eqn 2
hist(traits$par_per_leaf_area)
hist(traits$Ambient_PAR)
hist(traits$par)
hist(((1 - exp(-0.5 * traits$lai)) / traits$lai))
## remove C4 and values without d13c
traits_sub = subset(traits, lma > 0 & leaf_dry_mass_g < 100 & photosynthetic_pathway == 'C3' & leaf_C13_delta_PDB != 'NA'
& leaf_C13_delta_PDB < -20 & trt != 'Fence' & trt != 'NPK+Fence')
traits_sub$delta = (-8 - traits_sub$leaf_C13_delta_PDB) / (1 + traits_sub$leaf_C13_delta_PDB * 0.001)
traits_sub$chi = (traits_sub$delta - 4.4) / (27 - 4.4)
hist(traits_sub$lma) # some extremely high values
hist(traits_sub$narea) # some extremely high values
hist(traits_sub$la_m2)
hist(traits_sub$leaf_dry_mass_g) #
hist(traits_sub$chi) # looks good
## calculate optimal trait values
traits_photo = calc_optimal_vcmax(tg_c = traits_sub$tmp, paro = traits_sub$par_per_leaf_area, cao = 400,
vpdo = traits_sub$vpd, z = traits_sub$z, chi = traits_sub$chi)
plot(traits_photo$vcmax25 ~ traits_photo$tmp)
head(traits_photo)
plot(traits_photo$vcmax25 ~ traits_photo$tg_c)
calc_tresp_mult
setwd("/Users/nicksmith/Documents/Git/vcmax25")
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax/functions')
source('optimal_vcmax/calc_optimal_vcmax.R')
## data for temperature and light responses
temperature = calc_optimal_vcmax(tg_c = seq(5, 35, 5))
head(temperature)
sourceDirectory('optimal_vcmax/functions')
source('optimal_vcmax/calc_optimal_vcmax.R')
## data for temperature and light responses
temperature = calc_optimal_vcmax(tg_c = seq(5, 35, 5))
head(temperature)
light = calc_optimal_vcmax(paro = seq(100, 1500, 50))
head(light)
## some plots
plot(temperature$vcmax_25 / temperature$vcmax_25[5] ~ temperature$tg_c, lwd = 4, col = 'blue')
## some plots
plot(temperature$vcmax_25 / temperature$vcmax_25[5] ~ temperature$tg_c, lty = 1, lwd = 4, col = 'blue')
## some plots
plot((temperature$vcmax_25 / temperature$vcmax_25[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'blue')
lines((temperature$vcmax_prime_25 / temperature$vcmax_prime_25[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'red')
lines((temperature$vcmax_25_alt / temperature$vcmax_25_alt[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'red')
(temperature$vcmax_25_alt / temperature$vcmax_25_alt[5])
## some plots
plot((temperature$vcmax_25 / temperature$vcmax_25[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'blue', ylim = c(0, 4))
lines((temperature$vcmax_25_alt / temperature$vcmax_25_alt[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'red')
head(light)
plot((light$vcmax_25 / light$vcmax_25[5]) ~ light$tg_c, type = 'l', lwd = 4, col = 'blue', ylim = c(0, 4))
lines((light$vcmax_25_alt / light$vcmax_25_alt[5]) ~ light$tg_c, type = 'l', lwd = 4, col = 'red')
(light$vcmax_25 / light$vcmax_25[5])
(light$vcmax_25_alt / light$vcmax_25_alt[5])
plot((light$vcmax_25 / light$vcmax_25[5]) ~ light$par, type = 'l', lwd = 4, col = 'blue', ylim = c(0, 5))
lines((light$vcmax_25_alt / light$vcmax_25_alt[5]) ~ light$par, type = 'l', lwd = 4, col = 'red')
plot((temperature$vcmax_25 / temperature$vcmax_25[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'blue', ylim = c(0, 4))
lines((temperature$vcmax_25_alt / temperature$vcmax_25_alt[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'red')
head(temperature)
## load libraries
library(R.utils)
## load optimal vcmax script (Smith et al., Ecology Letters)
sourceDirectory('optimal_vcmax/functions')
source('optimal_vcmax/calc_optimal_vcmax.R')
## data for temperature and light responses
temperature = calc_optimal_vcmax(tg_c = seq(5, 35, 5))
head(temperature)
lines((temperature$vcmax_star / temperature$vcmax_star[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'black')
lines((temperature$vcmax_prime / temperature$vcmax_prime[5]) ~ temperature$tg_c, type = 'l', lwd = 4, col = 'grey')
source('calc_optimal_vcmax.R')
par_seq = calc_optimal_vcmax(paro = seq(100, 1000, 100))
t_seq = calc_optimal_vcmax(tg_c = seq(10, 30, 5))
vpd_seq = calc_optimal_vcmax(vpdo = seq(0.5, 4, 0.5))
z_seq = calc_optimal_vcmax(z = seq(0, 1000, 100))
ca_seq = calc_optimal_vcmax(cao = seq(250, 1000, 50))
par_seq
z_seq
