source('calc_optimal_vcmax.R')
par_seq = calc_optimal_vcmax(paro = seq(100, 1000, 100))
par_seq
t_seq = calc_optimal_vcmax(tg_c = seq(10, 30, 5))
t_seq
vpd_seq = calc_optimal_vcmax(vpdo = seq(0.5, 4, 0.5))
z_seq = calc_optimal_vcmax(z = seq(0, 1000, 100))
ca_seq = calc_optimal_vcmax(cao = seq(250, 1000, 50))
ca_seq
source('calc_optimal_vcmax.R')
par_seq = calc_optimal_vcmax(paro = seq(100, 1000, 100))
t_seq = calc_optimal_vcmax(tg_c = seq(10, 30, 5))
vpd_seq = calc_optimal_vcmax(vpdo = seq(0.5, 4, 0.5))
z_seq = calc_optimal_vcmax(z = seq(0, 1000, 100))
ca_seq = calc_optimal_vcmax(cao = seq(250, 1000, 50))
par_seq
source('calc_optimal_vcmax.R')
par_seq = calc_optimal_vcmax(paro = seq(100, 1000, 100))
t_seq = calc_optimal_vcmax(tg_c = seq(10, 30, 5))
function(theta, c, m){ # paro in Âµmol m-2 s-1 and z in m
cm = ((4 * c) / m) # simplification term for omega calculation
v = 1/(cm * (1 - (theta * cm))) - 4 * theta # simplification term for omega calculation
# account for non-linearities at low m values
cquad = -1
bquad = 3.4
aquad = -(3.4 * theta)
quad_root = (-bquad + sqrt(bquad^2 - (4 * aquad * cquad))) / (2 * aquad)
m_star = (4 * c) / quad_root
if(8*c < m){
omega = -(1 - (2 * theta)) + sqrt((1 - theta) * v)
} else{
omega = -(1 - (2 * theta)) - sqrt((1 - theta) * v)
}
#omega = ifelse(m < m_star, -(1 - (2 * theta)) - sqrt((1 - theta) * v), -(1 - (2 * theta)) + sqrt((1 - theta) * v))
omega
}
t_seq = calc_optimal_vcmax(tg_c = seq(10, 30, 5))
par_seq = calc_optimal_vcmax(paro = seq(100, 1000, 100))
par_seq
theta = 0.85
c = 0.05336251
# constants
R <- 8.314
c <- 0.05336251
leakiness <- 0.01
z = 0
# environmental terms
patm <- calc_patm(z)
paro=800
par <- calc_par(paro, z)
tg_c = 10
vpdo = 1
vpd <- calc_vpd(tg_c, z, vpdo)
ca <- cao * 1e-6 * patm
cao - 400
cao = 400
oao = 209460
ca <- cao * 1e-6 * patm
oa <- oao * 1e-6 * patm
# K and Gamma* model terms
km <- calc_km_pa(tg_c, z)
gammastar <- calc_gammastar_pa(tg_c, z)
chi =0.7
ci <- chi * ca # Pa
mc <- ((ci - gammastar) / (ci + km))
m <- ((ci - gammastar)/(ci + (2 * gammastar)))
m
omega <- calc_omega(theta = theta, c = c, m = m)
8*c
m
if(8*c < m){
omega = -(1 - (2 * theta)) + sqrt((1 - theta) * v)
} else{
omega = -(1 - (2 * theta)) - sqrt((1 - theta) * v)
}
cm = ((4 * c) / m) # simplification term for omega calculation
v = 1/(cm * (1 - (theta * cm))) - 4 * theta # simplification term for omega calculation
if(8*c < m){
omega = -(1 - (2 * theta)) + sqrt((1 - theta) * v)
} else{
omega = -(1 - (2 * theta)) - sqrt((1 - theta) * v)
}
omega
t_seq = calc_optimal_vcmax(tg_c = seq(10, 30, 5))
source('calc_optimal_vcmax.R')
par_seq = calc_optimal_vcmax(paro = seq(100, 1000, 100))
t_seq = calc_optimal_vcmax(tg_c = seq(10, 30, 5))
t_seq
t_seq$m
omega = ifelse(8*c > m, -(1 - (2 * theta)) - sqrt((1 - theta) * v), -(1 - (2 * theta)) + sqrt((1 - theta) * v))
omega
theta = 0.99
cm = ((4 * c) / m) # simplification term for omega calculation
v = 1/(cm * (1 - (theta * cm))) - 4 * theta # simplification term for omega calculation
omega = ifelse(8*c > m, -(1 - (2 * theta)) - sqrt((1 - theta) * v), -(1 - (2 * theta)) + sqrt((1 - theta) * v))
omega
-(1 - (2 * theta)) - sqrt((1 - theta) * v)
-(1 - (2 * theta)) + sqrt((1 - theta) * v)
8*c
m
m/c
8*theta
m
m=0.4
m/c
tg_c=2
gammastar <- calc_gammastar_pa(tg_c, z)
m <- ((ci - gammastar)/(ci + (2 * gammastar)))
m
tg_c=50
gammastar <- calc_gammastar_pa(tg_c, z)
m <- ((ci - gammastar)/(ci + (2 * gammastar)))
m
omega = ifelse(8*c > m & 4*c < m & m/c < 8*theta, -(1 - (2 * theta)) - sqrt((1 - theta) * v), -(1 - (2 * theta)) + sqrt((1 - theta) * v))
omega
par_seq = calc_optimal_vcmax(paro = seq(100, 1000, 100))
t_seq = calc_optimal_vcmax(tg_c = seq(10, 30, 5))
vpd_seq = calc_optimal_vcmax(vpdo = seq(0.5, 4, 0.5))
z_seq = calc_optimal_vcmax(z = seq(0, 1000, 100))
ca_seq = calc_optimal_vcmax(cao = seq(250, 1000, 50))
ca_seq
ca_seq2 = calc_optimal_vcmax(cao = seq(250, 1000, 50), tg_c = 45)
ca_seq2
ca_seq2 = calc_optimal_vcmax(cao = seq(250, 1000, 50), tg_c = 45, theta = 0.99)
source('calc_optimal_vcmax.R')
ca_seq2 = calc_optimal_vcmax(cao = seq(250, 1000, 50), tg_c = 45, theta = 0.99)
ca_seq2
plot(ca_seq2$cao, ca_seq2$vcmax)
plot(ca_seq2$cao, ca_seq2$vcmax25)
plot(ca_seq2$cao, ca_seq2$omega)
